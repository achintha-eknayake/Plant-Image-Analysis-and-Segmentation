
% RMSContrast costume function calculating contrast using RMS contrst technique
function contrastValue = RMSContrast(image)
    % Convert RGB to grayscale if necessary
    if size(image, 3) == 3
        image = customGrayscale(loadedImages(k).data, weights);
    end
    
    % Convert to double for accurate calculations
    image = double(image);

    % Calculate the mean intensity
    meanIntensity = mean(image(:));

    % Calculate the RMS contrast
    contrastValue = sqrt(mean((image(:) - meanIntensity).^2));
end

function grayImage = customGrayscale(image, weights)
    % customGrayscale - Converts an RGB image to grayscale using custom weights
    %   image: The input RGB image
    %   weights: A vector [wR, wG, wB] specifying the weights for the R, G, and B channels
    %   grayImage: The resulting grayscale image
    
    % Validate the input weights
    if abs(sum(weights) - 1) > 1e-6
        error('Weights must sum to 1');
    end

    % Extract RGB channels
    R = double(image(:, :, 1));
    G = double(image(:, :, 2));
    B = double(image(:, :, 3));
    
    % Apply the weights to convert to grayscale
    grayImage = weights(1) * R + weights(2) * G + weights(3) * B;

    % Normalize to [0, 255] if needed
    grayImage = uint8(grayImage);
end

function histogram = generateHistogram(grayscaleImage)
    % generateHistogram - Computes and displays the histogram of a grayscale image
    %   grayscaleImage: Input grayscale image (2D matrix)
    %   histogram: Output histogram array (256 bins for 8-bit images)

    % Ensure the image is grayscale
    if ~ismatrix(grayscaleImage)
        error('Input must be a grayscale image.');
    end

    % Initialize the histogram with 256 bins
    histogram = zeros(1, 256);

    % Calculate the histogram
    for intensity = 0:255
        histogram(intensity + 1) = sum(grayscaleImage(:) == intensity);
    end

    % Display the histogram
    figure;
    bar(0:255, histogram, 'k'); % Bar graph for the histogram
    xlim([0 255]); % Limit x-axis to pixel intensity range
    xlabel('Pixel Intensity');
    ylabel('Frequency');
    title('Grayscale Image Histogram');
end

% Get the current folder path
folderPath = fileparts(mfilename("fullpath"));

% Find all image files in the current folder
imageFiles = [dir(fullfile(folderPath, '*.jpg')); ...
              dir(fullfile(folderPath, '*.jfif')); ...
              dir(fullfile(folderPath, '*.jpeg'))];

% Initialize a struct to store images, filenames, and contrast values
loadedImages = struct('name', {}, 'data', {}, 'grayscale', {}, 'contrast', {});

% Initialize a struct to store images, filenames, and processed data
processedImages = struct('name', {}, 'grayscale', {}, 'binarized', {}, 'filtered', {});

% Define optimized weights for maximum contrast
weights = [0.3, 0.59, 0.11]; % Example weights (adjust for maximum contrast)

% Define custom structuring element for morphological operations
se = strel('disk', 5); % Example: circular structuring element with radius 5

if isempty(imageFiles)
    disp('No image files found in the current folder.');
else
    for k = 1:length(imageFiles)
        % Read each image
        fullFileName = fullfile(folderPath, imageFiles(k).name);
        loadedImages(k).name = imageFiles(k).name; % Store the filename
        loadedImages(k).data = imread(fullFileName); % Store the image data

        rgbImage = imread(fullFileName);
        grayscaleImage = customGrayscale(rgbImage, [0.3, 0.59, 0.11]); % Example weights

        
        % Convert the image to grayscale using custom weights
        loadedImages(k).grayscale = customGrayscale(loadedImages(k).data, weights);
        
        % Calculate the contrast of the grayscale image
        loadedImages(k).contrast = RMSContrast(loadedImages(k).grayscale);
        
        % Display the grayscale image
        figure;
        imshow(loadedImages(k).grayscale);
        title(['Grayscale Image ', num2str(k), ': ', loadedImages(k).name, ...
               ' | Contrast: ', num2str(loadedImages(k).contrast)]);

        % Generate and display the histogram
        histogram = generateHistogram(grayscaleImage);
    end
end

% Example: Display the optimized weights in the command window
disp(['Optimized Weights: [R: ', num2str(weights(1)), ...
      ', G: ', num2str(weights(2)), ', B: ', num2str(weights(3)), ']']);
